Introduction to WPF data binding

http://www.wpf-tutorial.com/data-binding/introduction/

Data binding is general technique that binds two data/information
sources together and maintains synchronization of data.


<StackPanel Margin="10">
    <TextBox Name="txtValue" />
    <WrapPanel Margin="0,10">
        <TextBlock Text="Value: " FontWeight="Bold" />
        <!-- TextBlock Element 의 Text 프로퍼티를 txtValue 의 Text 와 바인딩 한다. -->
        <TextBlock Text="{Binding Path=Text, ElementName=txtValue}" />
    </WrapPanel>
</StackPanel>

The Syntax of a Binding

current data context

{Binding} => This simply returns the current data context


Responding to data source changes

DataSource 를 정의하고 이를 연결하는 작업에는 WPF 의 Window Control
에서 제공해주는 Default DataSource 와는 다르게 부수적인 작업이 필요로 하다

두 가지 시나리오
1. Changes to the list of items
2. Changes in the bound properties in each of the data objects
위의 두가지 시나리오는 아래의 두가지를 이용해서 실현될 수 있다.
ObservableCollection
INotifyPropertyChanged interface

The itemSource of the list is assigned to a quick list of a couple
of users that we create in the window constructor. The problem is
that none of the buttons seems to work. Let's Fix that, in two easy steps.

Reflecting changes in the list data source

What we need is a list that notifies any destinations of changes to
its contents, and fortunately,

This is the price you will have to pay if you want to bind to your
own classes and have the changes reflected in the UI immediately.

When to use a value converter

- You have a numeric value but you want to show zero values in one
  way and positivie numbers in another way
- You want to check a CheckBox based on a value, but the value is
  a string like 'yes' or 'no' instead of a Boolean value
- You have a file size in bytes but you wish to show it as bytes,
  kilobytes, megabytes or gigabytes based on how big it is

Implementing a simple value converter
